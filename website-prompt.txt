You are tasked with creating a fully functional Contact Us form for the website that works seamlessly with a Cloudflare Worker endpoint at https://contact-relay.matthew-wetton1.workers.dev/. Follow these instructions carefully:

1. Form Structure

Create a <form> element with id="contact-form".

Include these fields, each required:

Name (text input)

Email (text input, must validate as proper email)

Message (textarea)

Include a submit button inside the form with type="submit" and label it “Send”.

Include a container element for displaying success or error messages (id="form-message").

2. Client-Side JavaScript

Attach a submit event listener to the form.

Use event.preventDefault() to prevent the page from reloading or jumping.

Validate fields:

Name, Email, and Message must be non-empty.

Email must match a proper email regex pattern.

If validation fails, show concise inline error messages below each field.

If validation passes, convert the form data to JSON and send it to the Cloudflare Worker using fetch:

fetch('https://contact-relay.matthew-wetton1.workers.dev/', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ name, email, message })
})


Handle fetch responses:

If success: true, display “Your message has been sent!” without reloading.

If success: false, display “An error occurred. Please try again.”

3. UX Requirements

Do not navigate away from the current page on submission.

Show success or error messages dynamically in the form-message container.

Clear the form inputs on successful submission.

Make the form visually consistent with the website’s styling (use existing CSS classes where appropriate).

4. Debugging & Logging

Temporarily log "Submit handler triggered" in console to confirm the listener fires.

Log the JSON payload before sending it to the worker to confirm data structure.

5. Output

Produce the complete HTML for the form.

Produce the JavaScript needed to validate, submit, and handle responses.

Ensure the form works correctly with the provided worker endpoint without requiring changes to the worker.

Do not modify unrelated JS (like header or logo resizing scripts).